// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package http

import (
	"gitlab.silkrode.com.tw/team_golang/kbc2/sample/internal/pkg/config"
	"gitlab.silkrode.com.tw/team_golang/kbc2/sample/internal/pkg/delivery/http/middleware"
	"gitlab.silkrode.com.tw/team_golang/kbc2/sample/internal/pkg/provider"
	"gitlab.silkrode.com.tw/team_golang/kbc2/sample/internal/pkg/repository/mysql"
	"gitlab.silkrode.com.tw/team_golang/kbc2/sample/internal/pkg/usecase"
)

// Injectors from wire.go:

func Initialize(configPath string) (*Application, error) {
	configConfig, err := config.NewConfig(configPath)
	if err != nil {
		return nil, err
	}
	goMiddleware := middleware.NewMiddleware()
	db, err := provider.NewDBConn(configConfig)
	if err != nil {
		return nil, err
	}
	articleRepository := mysql.NewMysqlArticleRepository(db)
	authorRepository := mysql.NewMysqlAuthorRepository(db)
	duration := provider.NewTimeoutContextDuration()
	articleUsecase := usecase.NewArticleUsecase(articleRepository, authorRepository, duration)
	echo := provider.NewEcho(goMiddleware, articleUsecase)
	application := newApplication(configConfig, echo)
	return application, nil
}
